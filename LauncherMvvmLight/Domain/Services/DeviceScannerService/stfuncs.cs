/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace excaliburST {

using System;
using System.Runtime.InteropServices;

public class stfuncs {
  public static int Get_UniqueID_P4000(ushort device_num, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Get_UniqueID_P4000(device_num, out OUTPUT);
    return ret;
  }

  public static int Get_4000Board_Type(ushort device_num, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Get_4000Board_Type(device_num, out OUTPUT);
    return ret;
  }

  public static int Get_4000Module_Type(ushort device_num, ushort module_num, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Get_4000Module_Type(device_num, module_num, out OUTPUT);
    return ret;
  }

  public static int Init_Module_Px(ushort devnum, ushort modnum) {
    int ret = stfuncsPINVOKE.Init_Module_Px(devnum, modnum);
    return ret;
  }

  public static int Attach_Module_Px(ushort devnum, ushort modnum) {
    int ret = stfuncsPINVOKE.Attach_Module_Px(devnum, modnum);
    return ret;
  }

  public static int Init_Module_RTx(ushort device_num, ushort modulenum, ushort enabled_channels, ushort xmt_channels) {
    int ret = stfuncsPINVOKE.Init_Module_RTx(device_num, modulenum, enabled_channels, xmt_channels);
    return ret;
  }

  public static int Release_Module_Px(int handlepx) {
    int ret = stfuncsPINVOKE.Release_Module_Px(handlepx);
    return ret;
  }

  public static int Release_Module_RTx(int handlertx) {
    int ret = stfuncsPINVOKE.Release_Module_RTx(handlertx);
    return ret;
  }

  public static int GetDevInfos(vecinfo pvDevInfos) {
    int ret = stfuncsPINVOKE.GetDevInfos(vecinfo.getCPtr(pvDevInfos));
    return ret;
  }

  public static int Exc_Peek_BYTE_RTx(int handlertx, ushort offset, out byte OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_BYTE_RTx(handlertx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_WORD_RTx(int handlertx, ushort offset, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_WORD_RTx(handlertx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_DWORD_RTx(int handlertx, ushort offset, out uint OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_DWORD_RTx(handlertx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_Word_Buffer_RTx(int handlertx, ushort offset, out byte OUTPUT, ushort size) {
    int ret = stfuncsPINVOKE.Exc_Peek_Word_Buffer_RTx(handlertx, offset, out OUTPUT, size);
    return ret;
  }

  public static int Exc_Peek_Px(int handlepx, ushort offset, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_Px(handlepx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_WORD_Px(int handlepx, ushort offset, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_WORD_Px(handlepx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_BYTE_Px(int handlepx, ushort offset, out byte OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_BYTE_Px(handlepx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_32Bit_Px(int handlepx, ushort offset, out uint OUTPUT) {
    int ret = stfuncsPINVOKE.Exc_Peek_32Bit_Px(handlepx, offset, out OUTPUT);
    return ret;
  }

  public static int Exc_Peek_Word_Buffer_Px(int handlepx, ushort offset, out byte OUTPUT, ushort size) {
    int ret = stfuncsPINVOKE.Exc_Peek_Word_Buffer_Px(handlepx, offset, out OUTPUT, size);
    return ret;
  }

  public static int Read_Revision_RTx(int handlertx) {
    int ret = stfuncsPINVOKE.Read_Revision_RTx(handlertx);
    return ret;
  }

  public static int Read_HwRevision_RTx(int handlertx) {
    int ret = stfuncsPINVOKE.Read_HwRevision_RTx(handlertx);
    return ret;
  }

  public static int Get_Rev_Level_Px(int handlepx) {
    int ret = stfuncsPINVOKE.Get_Rev_Level_Px(handlepx);
    return ret;
  }

  public static int Get_HWRev_DISCR(int handledio, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Get_HWRev_DISCR(handledio, out OUTPUT);
    return ret;
  }

  public static int Init_Module_DISCR(int devnum, int modnum) {
    int ret = stfuncsPINVOKE.Init_Module_DISCR(devnum, modnum);
    return ret;
  }

  public static int Get_4000Interface_Rev(ushort device_num, out ushort OUTPUT) {
    int ret = stfuncsPINVOKE.Get_4000Interface_Rev(device_num, out OUTPUT);
    return ret;
  }

}

}
