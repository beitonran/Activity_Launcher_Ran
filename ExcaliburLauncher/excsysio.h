// excsysio.h
//
// Define control codes for Excalbr driver
//

#ifndef __excsysio__h_
#define __excsysio__h_

//Definitions for old compilers
#ifndef ULONG_PTR
#if defined(_WIN64)
    typedef unsigned __int64 ULONG_PTR, *PULONG_PTR;
#else
    typedef unsigned long ULONG_PTR, *PULONG_PTR;
#endif
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
#endif


#define EXC_BUFFER_SIZE	256
#define EXC_BUFFER_SIZE_LARGE 512

// Win9x IOCTL Codes
#define EXC_IOCTL9X_BASE							32768
#define	EXC_IOCTL9X_TESTING							32768
#define	EXC_IOCTL9X_GET_INTERRUPT_COUNT				32769
#define	EXC_IOCTL9X_MAPMEM_MAP_DEVICE				32770
#define EXC_IOCTL9X_MAPMEM_UNMAP_DEVICE				32771
#define	EXC_IOCTL9X_GET_RAM_SIZE					32772
#define	EXC_IOCTL9X_GET_IRQ_NUMBER					32773
#define	EXC_IOCTL9X_SET_NOTIFICATION_EVENT			32774
#define	EXC_IOCTL9X_CLEAR_NOTIFICATION_EVENT		32775
#define EXC_IOCTL9X_READIOBYTE						32776
#define EXC_IOCTL9X_WRITEIOBYTE						32777
#define EXC_IOCTL9X_OPEN_DEVICE						32778
#define EXC_IOCTL9X_CLOSE_DEVICE					32779
#define	EXC_IOCTL9X_GET_MCH_INT_SHADOW_REGISTER		32780
#define	EXC_IOCTL9X_GET_MCH_INTERRUPT_COUNT			32781
#define	EXC_IOCTL9X_TOGGLE_AMPOL_MODE				32782
#define	EXC_IOCTL9X_AMPOL1							32783
#define	EXC_IOCTL9X_AMPOL2							32784
#define	EXC_IOCTL9X_AMPOL3							32785
#define	EXC_IOCTL9X_AMPOL4							32786
#define EXC_IOCTL9X_GET_BANK_RAM_SIZE				32787
#define EXC_IOCTL9X_GET_CARD_TYPE					32788
#define EXC_IOCTL9X_WRITE_ATTRIB					32789
#define EXC_IOCTL9X_READ_ATTRIB						32790
#define EXC_IOCTL9X_GET_BANK_PHYS_ADDR				32791
#define	EXC_IOCTL9X_SET_NOTIFICATION_EVENT_MODULE	32792
#define	EXC_IOCTL9X_CLEAR_NOTIFICATION_EVENT_MODULE	32793
#define EXC_IOCTL9X_READIOBYTE_ROBUST				32794
#define EXC_IOCTL9X_READ_ATTRIB_ROBUST				32795
#define EXC_IOCTL9X_END								32795


// WinNT/Win2000 IOCTL codes
#define EXC_IOCTLNT_MAPMEM_MAP_DEVICE			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_MAPMEM_UNMAP_DEVICE			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_SET_NOTIFICATION_EVENT		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_CLEAR_NOTIFICATION_EVENT	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_INTERRUPT_COUNT			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_IRQ_NUMBER				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x806, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_WRITEIOBYTE					CTL_CODE(FILE_DEVICE_UNKNOWN, 0x807, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_READIOBYTE					CTL_CODE(FILE_DEVICE_UNKNOWN, 0x808, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_MCH_INTERRUPT_COUNT		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x809, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_MCH_INT_SHADOW_REGISTER	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80A, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_WRITE_ATTRIB				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80B, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_READ_ATTRIB					CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80C, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_QUERYDEVICEINFO				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80D, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_RAM_SIZE				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80E, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_IS_WIN2000_COMPATIBLE		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x80F, METHOD_BUFFERED, FILE_ANY_ACCESS)
// .. Numbers 0x810 to 0x812 Reserved by Excalibur
#define EXC_IOCTLNT_GET_BANK_RAM_SIZE			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x813, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_CARD_TYPE				CTL_CODE(FILE_DEVICE_UNKNOWN, 0x814, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_GET_BANK_PHYS_ADDR			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x815, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_SET_NOTIFICATION_EVENT_MODULE	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x816, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_CLEAR_NOTIFICATION_EVENT_MODULE	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x817, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_READIOBYTE_ROBUST			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x818, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_READ_ATTRIB_ROBUST			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x819, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define EXC_IOCTLNT_READPCICONFIG		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x824, METHOD_BUFFERED, FILE_ANY_ACCESS)


// Basic defines common to all operating systems

// .. memory banks
#define EXC_BANK_DUALPORTRAM	0
#define EXC_BANK_DUALPORTRAM2	3
#define EXC_BANK_CONTROL		1
#define EXC_BANK_ATTRIB			2

#define EXC3910_BANK_LS			3
#define EXC3910_BANK_HSCONTROL	0
#define EXC3910_BANK_HSBCRT		1
#define EXC3910_BANK_HSMON		2

// EXC-4000PCI Board Types
#define EXC4000_BRDTYPE_PCI			0x4000
#define EXC4000_BRDTYPE_CPCI		0x4001
#define EXC4000_BRDTYPE_MCH_PCI		0x4002
#define EXC4000_BRDTYPE_MCH_CPCI	0x4003
#define EXC4000_BRDTYPE_MCH_PMC		0x4004
#define EXC4000_BRDTYPE_429_PMC		0x4005
#define EXC2000_BRDTYPE_PCI			0x4006
#define EXC4000_BRDTYPE_P104P		0x4007
#define EXC4000_BRDTYPE_PCIHC		0x4008
#define EXC4000_BRDTYPE_708_PMC		0x4009
#define EXC4000_BRDTYPE_1553PX_PMC	0x400A
#define EXC4000_BRDTYPE_DISCR_PCI   0x400D
#define EXC4000_BRDTYPE_PCIE		0xE400
#define EXC2000_BRDTYPE_PCIE		0xE406
#define EXCARD_BRDTYPE_1553PX		0xE401
#define EXCARD_BRDTYPE_429RTX		0xE402
#define EXC4500_BRDTYPE_PCIE_VPX	0xE450
#define EXC_BRDTYPE_664PCIE			0xE664
#define EXC_BRDTYPE_1394PCI			0x1394
#define EXC_BRDTYPE_1394PCIE		0xEF00

// EXC-4000PCI Module Types
#define EXC4000_MODTYPE_SERIAL		2
#define EXC4000_MODTYPE_MCH			3
#define EXC4000_MODTYPE_RTX			4
#define EXC4000_MODTYPE_PX			5
#define EXC4000_MODTYPE_MMSI		6
#define EXC4000_MODTYPE_708			7
#define EXC4000_MODTYPE_MA			8
#define EXC4000_MODTYPE_CAN			0xc
#define EXC4000_MODTYPE_DIO			0xd
#define EXC4000_MODTYPE_H009		0x9
#define EXC4000_MODTYPE_SERIAL_PLUS	0x12
#define EXC4000_MODTYPE_AFDX_TX		0x1C
#define EXC4000_MODTYPE_AFDX_RX		0x1A
#define EXC4000_MODTYPE_ETHERNET		0x1B
#define EXC4000_MODTYPE_NONE		0x1F


// .. device number defines
#define MAX_REGISTRY_DEVICES	16
#define MAX_DEVICES				64
#define MAX_MODULES				10  /* add 1 for new 4000 series which has 8 modules plus global bank and 1 for DMA bank */
#define MAX_BANKS				MAX_MODULES

#define EXC_1553PCI				MAX_REGISTRY_DEVICES+2
#define EXC_1553PCIPX           MAX_REGISTRY_DEVICES+3
#define DAS_429PCI				MAX_REGISTRY_DEVICES+4
#define EXC_3910PCI				MAX_REGISTRY_DEVICES+5

#define EXC_1553PCIPX_CARD0		EXC_1553PCIPX
#define EXC_1553PCIPX_CARD1		MAX_REGISTRY_DEVICES+6
#define EXC_1553PCIPX_CARD2		MAX_REGISTRY_DEVICES+7
#define EXC_1553PCIPX_CARD3		MAX_REGISTRY_DEVICES+8

#define EXC_4000PCI				MAX_REGISTRY_DEVICES+9
#define EXC_1553PCIMCH			MAX_REGISTRY_DEVICES+13

#define EXC_1760MMI_CARD0		MAX_REGISTRY_DEVICES+14	//30
#define EXC_1760MMI_CARD1		MAX_REGISTRY_DEVICES+15	//31

#define EXC_1394PCI				MAX_REGISTRY_DEVICES+16	//32
#define EXC_ETHERNET_PCIE			MAX_REGISTRY_DEVICES+18	//34
#define EXC_664_PCIE				MAX_REGISTRY_DEVICES+18	//34

// auto pcmcia values
// .. Win9x
#define EXC_DEVICE_ANYPCMCIA	MAX_REGISTRY_DEVICES+1
// .. Win2000
#define EXC_1553PCMCIA			MAX_REGISTRY_DEVICES+10
#define EXC_1553PCMCIAEP		MAX_REGISTRY_DEVICES+11
#define EXC_429PCMCIA			MAX_REGISTRY_DEVICES+12

// for backward compatibility
#define EXC_SOCKET_AUTO			0xFFFF
#define EXC_ANYSOCKET			99


// Operating Systems
#define EXC_OS_UNDEFINED	0
#define EXC_OS_WIN9X		1
#define EXC_OS_WINNT4		2
#define EXC_OS_WIN2000		3


// Packet Structures

// .. Common to all operating systems
typedef struct tagExcWriteIOPacket
{
	ULONG	offset;
	BYTE	value;
} t_ExcWriteIOPacket;

typedef struct tagExcReadIOPacket
{
	ULONG	offset;
	BYTE	*pValue;
} t_ExcReadIOPacket;

typedef struct tagExcWriteAttribPacket
{
	ULONG	offset;
	WORD	value;
} t_ExcWriteAttribPacket;

typedef struct tagExcReadAttribPacket
{
	ULONG	offset;
	WORD	*pValue;
} t_ExcReadAttribPacket;

typedef struct tagExcSetEventPkt
{
	ULONG	dwModule;
	HANDLE	hEvent;
} t_ExcSetEventPkt;

//In 64-bit windows, the kernel expects a 64-bit value for the handle 
typedef struct tagExcSetEventPkt64
{
	ULONG	dwModule;
	unsigned __int64 hEvent;
} t_ExcSetEventPkt64;

// .. Win9x Only
typedef struct tagExcDeviceIOPacket
{
	ULONG	nDevice;
	DWORD_PTR	dwData;
} t_ExcDeviceIOPacket;

// .. NT/2000 Only
typedef struct tagExcDevInfoPacket {
	DWORD	fWorkingState;
	DWORD	fRegistryDeviceValid;
	DWORD	fFlag3;
	DWORD	fFlag4;
	DWORD	fFlag5;
	DWORD	fFlag6;
	DWORD	dwBusType;
	DWORD	dwBoardType;
	DWORD	dwSocketNumber;
	DWORD	dwRegistryDevice;
	DWORD	dwDword5;
	DWORD	dwDword6;
	DWORD	dwDword7;
	DWORD	dwDword8;
} t_ExcDevInfoPacket;

typedef struct tagExcRegistryInfoPacket {
	char	szDeviceType[EXC_BUFFER_SIZE];
	DWORD	dwMemBase[MAX_BANKS];
	DWORD	dwMemLength[MAX_BANKS];
	DWORD	wMemHandle[MAX_BANKS];
	DWORD	dwMemBanks;
	DWORD	fUsingIRQ;
	DWORD	dwIrqNumber;
	DWORD	fUsingIO;
	DWORD	pIORange;
	DWORD	lIORangeLength;
	DWORD	dwSocketNumber;
} t_ExcRegistryInfoPacket;

// Access to kernel driver from Ring 3:
// .. Win9x
#define EXC_VXD_DEVICE_NAME	"\\\\.\\EXCALBR.VXD"

// .. WinNT4
#define EXC_KERNEL_DRIVER_NAME "Excalbr"
#define EXC_KERNEL_DRIVER_DEVICE_NAME "\\\\.\\ExcaliburDevice"

// .. Win2000 GUID: {0447153C-F7A1-433a-BD8F-3C81901A066F}
#define ExcaliburCardGUID  { 0x447153c, 0xf7a1, 0x433a, { 0xbd, 0x8f, 0x3c, 0x81, 0x90, 0x1a, 0x6, 0x6f } };





//////////////////
// Bus types
#define EXC_UNDEFINED_BUS	32
#define EXC_PCI_BUS			33
#define EXC_PCMCIA_BUS		34
#define EXC_ISA_BUS			35

//////////////////////
// Board Types
#define EXC_BRDTYPE_UNDEFINED		0
#define EXC_BRDTYPE_PCEP			1
#define EXC_BRDTYPE_PCMCH			2
#define EXC_BRDTYPE_1553PCIEP		3
#define EXC_BRDTYPE_PCIPX			4
#define EXC_BRDTYPE_429MX			5
#define EXC_BRDTYPE_MAGIC			6
#define EXC_BRDTYPE_429PCI			7
#define EXC_BRDTYPE_429RXTX			8
#define EXC_BRDTYPE_PCHC			9
#define EXC_BRDTYPE_3900			10
#define EXC_BRDTYPE_429PCMCIA		11
#define EXC_BRDTYPE_1553PCMCIA		12	
#define EXC_BRDTYPE_1553PCMCIAEP	13
#define EXC_BRDTYPE_HOO9			14
#define EXC_BRDTYPE_3910PCI			15
#define EXC_BRDTYPE_PCPX			16
#define EXC_BRDTYPE_4000PCI			17
#define EXC_BRDTYPE_PCIMCH			18
#define EXC_BRDTYPE_1760MMI			19
#define EXC_BRDTYPE_1553PCMCIAPX	20
#define EXC_BRDTYPE_4000PCI			17
#define EXC_BRDTYPE_PCIMCH			18
#define EXC_BRDTYPE_1760MMI			19
#define EXC_BRDTYPE_1553PCMCIAPX	20
#define EXC_BRDTYPE_1553PCMCIAEPPX	21 //recognizes EP or PX
#define EXC_BRDTYPE_AFDX			22
#define EXC_BRDTYPE_1394			32










#endif
